#!/bin/bash

#  Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0

ESP_OP=$IMAGE_OPERATOR
ESP_SR=$IMAGE_ESPSRV
ESP_MB=$IMAGE_METERBILL
ESP_LB=$IMAGE_LOADBAL

ESP_O2P=$IMAGE_ESPOAUTH2P
ESP_UAA=$IMAGE_UAA
ESP_STD=$IMAGE_ESPSTUDIO
ESP_SVR=$IMAGE_ESPSTRMVWR
ESP_ESM=$IMAGE_ESPESM
    
# usage -- all args are required.
#
show_usage() {
    echo "Usage: $0"
    echo ""
    echo "     GENERAL options"
    echo ""
    echo "          -r                          -- remove existing deploy/"
    echo "                                          before creating"
    echo "          -y                          -- no prompt, just execute"
    echo "          -n <namespace>              -- specify K8 namespace" 
    echo "          -d <ingress domain root>    -- project domain root,"
    echo "                                          ns.<domain root>/<path> is ingress"
    echo "          -l <esp license file>       -- SAS ESP license"
    echo ""
    echo "          -C                          -- deploy clients"
    echo "          -M                          -- enable multiuser mode"
    echo "          -A                          -- decorate for AZURE"
    echo "          -W                          -- decorate deployment for AWS"
    echo "   "      -G                          -- decorate deployment for Google Cloud"
    echo ""

    exit 1
}

ROOT=$0

ASKUSER="y"
RMDEPLOY="n"

# make sure we are launched from .../operator or .../single_user_clients
#
BASE=`basename $PWD`
echo "BASE = <$BASE>"
[ $BASE != "esp-cloud" ] && echo "script must be run from the esp-cloud directory" && exit 1

CLIENTS=no
MULTI=no
ESP_AZURE_COMMENT="#"
ESP_AWS_COMMENT="#"
ESP_GCP_COMMENT="#"
ESP_NFS_COMMENT=""
ESP_MULTI_COMMENT="#"
ESP_OPEN_COMMENT=""

SUBDIRS="operator"
while getopts "?c:l:n:o:s:d:m:b:e:t:v:a:ryCMAWG" opt; do
    case "$opt" in
        \?)
            show_usage
            return 1
            ;;
	r)  RMDEPLOY="y"
	    ;;
	y)  ASKUSER="n"
	    ;;
        n)  ESP_NS=$OPTARG
            ;;
	C)  CLIENTS=yes
	    SUBDIRS="$SUBDIRS clients"
	    ;;
	M)  MULTI=yes
	    SUBDIRS="$SUBDIRS oauth2"	    
	    ESP_MULTI_COMMENT=""
	    ESP_OPEN_COMMENT="#"
	    ;;
	A)  ESP_AZURE_COMMENT=""
	    ESP_NFS_COMMENT="#"
	    ;;
	W)  ESP_AWS_COMMENT=""
	    ESP_NFS_COMMENT="#"
	    ;;
	G)  ESP_GCP_COMMENT=""
	    ESP_NFS_COMMENT="#"
	    ;;
        o)  ESP_OP=$OPTARG
            ;;
        s)  ESP_SR=$OPTARG
            ;;
        d)  ESP_DM=$OPTARG
            ;;
        m)  ESP_MB=$OPTARG
            ;;
        b)  ESP_LB=$OPTARG
            ;;
        t)  ESP_STD=$OPTARG
            ;;
        v)  ESP_SVR=$OPTARG
            ;;
        e)  ESP_ESM=$OPTARG
            ;;
        a)  ESP_O2P=$OPTARG
            ;;
	l)  ESP_LF=$OPTARG
            ;;
        *)
            echo "bad option <$opt>" && show_usage
    esac
done

[ -z $ESP_NS ] && echo "namespace not specified" && show_usage
[ -z $ESP_DM ] && echo "root domain not specified" && show_usage
[ -z $ESP_LF ] && echo "license file not specified" && show_usage

# operator, server and metering docker images
#
[ -z $ESP_OP ] && echo "ESP operator image not specified" && show_usage
[ -z $ESP_SR ] && echo "ESP server image not specified" && show_usage
[ -z $ESP_MB ] && echo "ESP metering server image not specified" && show_usage
[ -z $ESP_LB ] && echo "ESP load balancer image not specified" && show_usage

# studio, streamviewer and esm docker images
#
if [[ "yes" = "$CLIENTS" ]] ; then 
    [ -z $ESP_ESM ] && echo "Event Stream Manager image not specified" && show_usage
    [ -z $ESP_STD ] && echo "Event Stream Processing Studio image not specified" && show_usage
    [ -z $ESP_SVR ] && echo "Event Stream Processing Streamviewer image not specified" && show_usage
fi

# multiuser?
#
if [[ "yes" = "$MULTI" ]] ; then 
    [ -z $ESP_O2P ] && echo "oauth2 proxy image not specified" && show_usage
    [ -z $ESP_UAA ] && echo "UAA image not specified" && show_usage    

    # We use the following env vars to create the postgres/uaa secrets
    #    for the deployment.
    #
    [ -z $postgresSQLUsername ]     && echo "postgresSQLUsername not set defaulting to pgUSER" && export postgresSQLUsername=pgUSER
    [ -z $postgresSQLCredentials ]  && echo "postgresSQLCredentials not set defaulting to pgPASS" && export postgresSQLCredentials=pgPASS
    [ -z $uaaUsername]              && echo "uaaUsername not set defaulting to uaaUSER" && export uaaUsername=uaaUSER
    [ -z $uaaCredentials]           && echo "uaaCredentials not set defaulting to uaaPASS" && export uaaCredentials=uaaPASS

    TEMPLATE_UAA_ADMIN=$uaaUsername
    TEMPLATE_UAA_CREDENTIALS=$uaaCredentials

    
fi


[ ! -f $ESP_LF ] && echo "License file <$ESP_LF> was not found, aborting." && exit 1
LICB64GZ=`cat $ESP_LF | gzip - | base64 -w 0`


ROOT=`readlink -f $ROOT`
ROOT=`dirname $ROOT`
ROOT=`readlink -f $ROOT/..`
#ROOT=${ROOT}/${BASE}

DEPLOYMENT=$ROOT/deploy

echo "ROOT = <$ROOT>"

if [[ "$ASKUSER" = "y" ]] ; then 
    echo
    echo "The following susbstitution will be made across all manifest"
    echo "   yaml files"
    echo 
    echo "TEMPLATE_ESP_NAMESPACE      <-- $ESP_NS"
    echo "TEMPLATE_ESP_DOMAIN         <-- $ESP_DM"
    echo "TEMPLATE_ESP_LICENSE        <-- $ESP_LF"

    echo "TEMPLATE_ESP_OPERATOR_IMAGE <-- $ESP_OP"
    echo "TEMPLATE_ESP_SERVER_IMAGE   <-- $ESP_SR"
    echo "TEMPLATE_ESP_METER_IMAGE    <-- $ESP_MB"
    echo "TEMPLATE_ESP_LB_IMAGE       <-- $ESP_LB"
    
    if [[ "yes" = "$CLIENTS" ]] ; then 
	echo "TEMPLATE_ESM_IMAGE          <-- $ESP_ESM"
	echo "TEMPLATE_ESPSTUDIO_IMAGE    <-- $ESP_STD"
	echo "TEMPLATE_STREAMVIEWER_IMAGE <-- $ESP_SVR"
    fi

    if [[ "yes" = "$MULTI" ]] ; then 
	echo "TEMPLATE_ESP_OAUTH2P_IMAGE  <-- $ESP_O2P"
    fi
    
    [ "y" = "$RMDEPLOY" ] && echo && echo "directory $DEPLOYMENT will be removed and recreated."
    echo ""
    read -p "would you like to proceed (y/n)? " ANS
    if [[ "$ANS" != "y" ]]; then
	echo "  script aborted"
	exit 1
    fi
fi

[ "y" = "$RMDEPLOY" ] && rm -rf $DEPLOYMENT
mkdir -p ${DEPLOYMENT}


for i in ${SUBDIRS} ; do
    
    TEMPLATES=${i}/templates
    if [[ ! -d "$TEMPLATES" ]]; then
	echo "templates/ directory could not be found as: $TEMPLATES"
	echo "script aborting."
	exit 1
    fi

    # copy files from TEMPLATES to DEPLOYMENT
    cp -a ${TEMPLATES}/* ${DEPLOYMENT}

done

for i in  `find ${DEPLOYMENT} -name "*.xml"` ; do 
    sed -i 's|TEMPLATE_ESP_NAMESPACE|'$ESP_NS'|g' $i
done

for i in `find ${DEPLOYMENT} -name "*.y*ml"` ; do 
    echo "working on $i"
    sed -i -f - $i << EOF
s|TEMPLATE_ESP_LICB64GZ|$LICB64GZ|g
EOF

    sed -i 's|TEMPLATE_ESP_NAMESPACE|'$ESP_NS'|g' $i
    sed -i 's|TEMPLATE_ESP_DOMAIN|'$ESP_DM'|g' $i

    sed -i 's|TEMPLATE_ESP_OPERATOR_IMAGE|'$ESP_OP'|g' $i
    sed -i 's|TEMPLATE_ESP_SERVER_IMAGE|'$ESP_SR'|g' $i
    sed -i 's|TEMPLATE_ESP_METER_IMAGE|'$ESP_MB'|g' $i
    sed -i 's|TEMPLATE_ESP_LB_IMAGE|'$ESP_LB'|g' $i
    sed -i 's|TEMPLATE_ESM_IMAGE|'$ESP_ESM'|g' $i
    sed -i 's|TEMPLATE_ESPSTUDIO_IMAGE|'$ESP_STD'|g' $i
    sed -i 's|TEMPLATE_STREAMVIEWER_IMAGE|'$ESP_SVR'|g' $i
    sed -i 's|TEMPLATE_ESP_OAUTH2P_IMAGE|'$ESP_O2P'|g' $i

    sed -i 's|TEMPLATE_ESP_OPEN|'$ESP_OPEN_COMMENT'|g' $i    
    sed -i 's|TEMPLATE_ESP_MULTI|'$ESP_MULTI_COMMENT'|g' $i
    sed -i 's|TEMPLATE_ESP_AZURE|'$ESP_AZURE_COMMENT'|g' $i    
    sed -i 's|TEMPLATE_ESP_AWS|'$ESP_AWS_COMMENT'|g' $i    
    sed -i 's|TEMPLATE_ESP_GCP|'$ESP_GCP_COMMENT'|g' $i    
    sed -i 's|TEMPLATE_ESP_NFS|'$ESP_NFS_COMMENT'|g' $i
    sed -i 's|TEMPLATE_UAA_IMAGE|'$ESP_UAA'|g' $i
    sed -i 's|TEMPLATE_UAA_ADMIN|'$uaaUsername'|g' $i
    sed -i 's|TEMPLATE_UAA_CREDENTIALS|'$uaaCredentials'|g' $i    
done




