#!/bin/bash
#  Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0

ROOT=`dirname $0`
ROOT=`readlink -f $ROOT`

aws sts get-caller-identity &>/dev/null ; [ 0 -ne $? ] && echo "not logged in to AWS" && exit 1

# usage 
#
show_usage() {
    echo "Usage: $0"
    echo ""
    echo "required: -r <EKS geographical region>"
    exit 1
}   

while getopts "?r:" opt; do
    case "$opt" in
        \?)
            show_usage
            return 1
            ;;
	r)  AWS_REG=$OPTARG
	    ;;
        *)
            echo "bad option <$opt>" && show_usage
    esac
done

[ -z $AWS_REG ] && echo "region EKS cluster resides in must be specified" && show_usage

AWS_ACCID=`aws sts get-caller-identity | jq '.Account'`
[ 0 -ne $? ] && echo "could not obtain AWS Account ID" && exit 1
AWS_ACCID=`eval echo $AWS_ACCID`

AWS_CRLS=$AWS_ACCID.dkr.ecr.$AWS_REG.amazonaws.com
aws ecr get-login-password --region $AWS_REG | docker login --username AWS --password-stdin $AWS_CRLS
[ 0 -ne $? ] && echo "could not login to AWS docker registry" && exit 1


which docker &>/dev/null ; [ 0 -ne $? ] && echo "docker not found on path" && exit 1

rm -f $ROOT/aws-images

for i in `env| fgrep IMAGE_ | fgrep repulp`; do

    ENVV=`echo $i | cut -d = -f 1`
    IMAGE=`echo $i | cut -d = -f 2`

    REPO=`echo $IMAGE | cut -d : -f 1`
    TAG=`echo $IMAGE | cut -d : -f 2`

    AWS_REPO=`basename $REPO`

    echo $i | fgrep release &> /dev/null
    if [[ 0 -eq $? ]]; then BUILD_LEVEL="release/"; fi 
    echo $i | fgrep snapshot &> /dev/null
    if [[ 0 -eq $? ]]; then BUILD_LEVEL="snapshot/"; fi 
    echo
    echo "AWS_REPO = <$AWS_REPO>"
    echo "      REPO = <$REPO>"
    echo "      TAG  = <$TAG>"

    echo "Working on $IMAGE"
    echo "   docker pull"
    docker pull $IMAGE &> /dev/null
    [ 0 -ne $? ] && echo "failed" && exit 0 

    aws ecr describe-repositories --region $AWS_REG | jq '.[] | .[].repositoryName' | fgrep "$BUILD_LEVEL$AWS_REPO"
    if [ 0 -ne $? ]; then
	aws ecr create-repository --region $AWS_REG --repository-name "$BUILD_LEVEL$AWS_REPO" &>/dev/null
    fi
    echo "   docker tag"
    docker tag $IMAGE $AWS_CRLS/${BUILD_LEVEL}$AWS_REPO:$TAG    
    [ 0 -ne $? ] && echo "failed" && exit 0
    echo "   docker push"
    docker push $AWS_CRLS/${BUILD_LEVEL}$AWS_REPO:$TAG
    [ 0 -ne $? ] && echo "failed" && exit 0
    echo "   docker remove"
    docker image rm $IMAGE &> /dev/null
    [ 0 -ne $? ] && echo "failed" && exit 0
    docker image rm $AWS_CRLS/${BUILD_LEVEL}$AWS_REPO:$TAG
    [ 0 -ne $? ] && echo "failed" && exit 0
    echo "All done"

    echo "export $ENVV=$AWS_CRLS/${BUILD_LEVEL}$AWS_REPO:$TAG" >> $ROOT/aws-images
done

echo "export IMAGE_UAA=ghcr.io/skolodzieski/uaa:74.29.0" >> $ROOT/aws-images

. $ROOT/azure-images
