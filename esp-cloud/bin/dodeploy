#!/bin/bash

#  Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0

# usage -- all args are required.
#
show_usage() {
    echo "Usage: $0"
    echo "          -n <namespace>             -- specify K8s namespace"
    exit 1
}

ROOT=$0

# make sure we are launched from .../operator or .../single_user_clients
#
BASE=`basename $PWD`
[ $BASE != "esp-cloud" ] && echo "script must be run from the esp-cloud directory" && exit 1

while getopts "?n:" opt; do
    case "$opt" in
        \?)
            show_usage
            return 1
            ;;
        n)  ESP_NS=$OPTARG
            ;;
        *)
            show_usage
    esac
done

[ -z $ESP_NS ] && show_usage

ROOT=`readlink -f $ROOT`
ROOT=`dirname $ROOT`
ROOT=`readlink -f $ROOT/..`
#ROOT=${ROOT}/${BASE}

echo "ROOT = <$ROOT>"
DEPLOYMENT=$ROOT/deploy

if [[ ! -d "$DEPLOYMENT" ]]; then
    echo "deploy/ directory could not be found as: $DEPLOYMENT"
    echo "script aborting."
    exit 1
fi

FOO=`kubectl get ns $ESP_NS`
if [[ 0 -ne $? ]] ; then
    echo "namespace $ESP_NS does not exists on this cluster"
    echo ""
    read -p "would you like us to create it (y/n)?" ANS
    if [[ "Z$ANS" == "Zy" ]] ; then
	echo "issuing command: kubectl create ns $ESP_NS"
	kubectl create ns $ESP_NS
	echo "return: $?"
	if [[ 0 -ne $? ]] ; then
	    echo "Create Kubernetes namespace failed. Please investigate, exiting."
	    exit 1
	fi
    else 
	echo "Create the namespace yourself, then re-run script"
	exit 1
    fi
fi

# create secrets
#
# We use the following env vars to create the postgres/uaa secrets
#    for the deployment.
#
[ -z $postgresSQLUsername ]     && echo "postgresSQLUsername not set defaulting to pgUSER" && postgresSQLUsername=pgUSER
[ -z $postgresSQLCredentials ]  && echo "postgresSQLCredentials not set defaulting to pgPASS" && postgresSQLCredentials=pgPASS
[ -z $uaaUsername]              && echo "uaaUsername not set defaulting to uaaUSER" && uaaUsername=uaaUSER
[ -z $uaaCredentials]           && echo "uaaCredentials not set defaulting to uaaPASS" && uaaCredentials=uaaPASS

. $ROOT/bin/mksecrets

#
# Apply K8s CRD resources.
#
while read -r -s i
do
    echo "Applying: '${i}'"
    kubectl apply -f "${i}" --dry-run=server || {
        # The dry run failed.
        # Kubectl should have displayed an error.
        echo >&2 $'\n'"Kubectl failed to apply the '${i}' custom resource definitions."
        exit 1
    }
    kubectl apply -f "${i}"
done < <(find "${DEPLOYMENT}/operator/crds/" -type f -iname '*.y?ml')

# apply pcv.yaml
if [ -f $DEPLOYMENT/pvc.yaml ] ; then
    kubectl -n ${ESP_NS} apply -f $DEPLOYMENT/pvc.yaml
fi

# apply pcv-pg.yaml
if [ -f $DEPLOYMENT/pvc-pg.yaml ] ; then
    kubectl -n ${ESP_NS} apply -f $DEPLOYMENT/pvc-pg.yaml
fi


# apply postgres.yaml
#
if [ -f $DEPLOYMENT/postgres.yaml ] ; then
    kubectl -n ${ESP_NS} apply -f $DEPLOYMENT/postgres.yaml
    i=0;
    OK="n"
    echo ""
    while [[ i -le 100 ]] ;
    do
        echo -n "."
        sleep 3;
	kubectl -n ${ESP_NS} get pods | fgrep -i postgres | fgrep -i running &>/dev/null
        if [ $? -eq 0 ]; then
	    OK="y"
            echo ""
            echo "  The postgres DB started successfully."
	    break;
        fi
        i=$((i+1));
    done;
    echo ""    
    if [[ "n" = "$OK" ]] ; then
	echo "  After 100 iterations, could not start the postgres DB"
	echo "     aborting deployment"
	exit 1;
    fi
fi    

#
# Apply K8s non-CRD resources.
#
while read -r -s i
do
    echo "deploying: $i"
    kubectl -n ${ESP_NS} apply -f $i
done < <(find "${DEPLOYMENT}" -wholename "${DEPLOYMENT}/operator/crds" -prune -o -type f \( -iname "*.y*ml" ! -iwholename "*project/*" ! -iwholename "*examples/*" ! -iname "pvc.yaml" ! -iname "pvc-pg.yaml" ! -iname "postgres.yaml" \))
