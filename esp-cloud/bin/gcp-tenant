#!/bin/bash
#  Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0

ROOT=`dirname $0`
ROOT=`readlink -f $ROOT`

# usage
#
show_usage() {
    echo "Usage: $0"
    echo ""
    echo "required: -p <GCP project> -t <tenant name>"
    echo "          -c <GKE cluster name>"
    echo "optional: -d [delete tenant]"
    echo ""
    exit 1
}

OFFBOARD=0

while getopts "?c:t:p:d" opt; do
    case "$opt" in
        \?)
            show_usage
            return 1
            ;;
        c)  GCP_CL=$OPTARG
            ;;
        t)  GCP_NS=$OPTARG
            ;;
        p)  GCP_PR=$OPTARG
            ;;
	d)  OFFBOARD=1
	    ;;
        *)
            echo "bad option <$opt>" && show_usage
    esac
done

[ -z $GCP_CL ]       && echo "cluster name must be specified"  && show_usage
[ -z $GCP_NS ]       && echo "K8s namespace must be specified" && show_usage
[ -z $GCP_PR ]       && echo "GCP project must be specified"   && show_usage

gcloud organizations list &> /dev/null ; [ 0 -ne $? ] && echo "not logged in to GCP" && exit 1


kubectl get ns/$GCP_NS &> /dev/null
if [ 0 -eq $? ] ; then
    [ 1 -eq $OFFBOARD ] && echo "deleting K8s namespace" && kubectl delete ns $GCP_NS
else
    [ 0 -eq $OFFBOARD ] && echo "creating K8s namespace" && kubectl create ns $GCP_NS
fi
    

GCP_IP=$(kubectl -n ingress-nginx get svc/ingress-nginx-controller -o json | jq .status.loadBalancer.ingress[0].ip)
GCP_IP=$(eval echo $GCP_IP)
while [ "null" == "$GCP_IP" ]; do
    echo "sleeping 1 second" ; sleep 1
    GCP_IP=$(kubectl -n ingress-nginx get svc/ingress-nginx-controller -o json | jq .status.loadBalancer.ingress[0].ip)
    GCP_IP=$(eval echo $GCP_IP)
done

GCP_DM=$(gcloud dns managed-zones describe ${GCP_CL}-zone | fgrep dnsName: | cut -f 2 -d ' ')
GCP_DM=${GCP_DM%%.}

#
gcloud dns --project=${GCP_PR} record-sets transaction start --zone=${GCP_CL}-zone
[ 0 -eq $OFFBOARD ] && gcloud dns --project=${GCP_PR} record-sets transaction add ${GCP_IP} --name=${GCP_NS}.${GCP_DM}. --ttl=300 --type=A --zone=${GCP_CL}-zone
[ 1 -eq $OFFBOARD ] && gcloud dns --project=${GCP_PR} record-sets transaction remove ${GCP_IP} --name=${GCP_NS}.${GCP_DM}. --ttl=300 --type=A --zone=${GCP_CL}-zone
gcloud dns --project=${GCP_PR} record-sets transaction execute --zone=${GCP_CL}-zone
[ 0 -ne $? ] && gcloud dns record-sets transaction abort --project=${GCP_PR} --zone=${GCP_CL}-zone

if [ 0 -eq $OFFBOARD ] ; then
    echo ""
    echo ""
    echo "Created Kubernetes namespace, private DNS record"
    echo ""
    echo "You must add an alias record to DNS that points"
    echo ""
    echo "   ${GCP_NS}.${GCP_DM}  --> ${GCP_IP}"
    echo ""
    echo "cluster namespace: $GCP_NS"
    echo ""
else
    echo ""
    echo ""
    echo "Removed Kubernetes namespace ($GCP_NS) and private DNS record"
    echo ""
fi
