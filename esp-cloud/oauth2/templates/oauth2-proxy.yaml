---
apiVersion: v1
data:
  oauth2-proxy.cfg: |
    http_address              = "0.0.0.0:4180"
    upstreams                 = "file:///dev/null"
    reverse_proxy             = true
    ssl_insecure_skip_verify  = true

    # Provider Configuration
    provider                = "oidc"
    code_challenge_method   = "S256"
    skip_provider_button    = true
    skip_jwt_bearer_tokens  = true
    whitelist_domains       = "TEMPLATE_ESP_NAMESPACE.TEMPLATE_ESP_DOMAIN"
    email_domains           = "*"
    redirect_url            = "https://TEMPLATE_ESP_NAMESPACE.TEMPLATE_ESP_DOMAIN/oauth2/callback"
    oidc_issuer_url         = "https://TEMPLATE_ESP_NAMESPACE.TEMPLATE_ESP_DOMAIN/uaa/oauth/token"
    # OIDC discovery with UAA causes issues, provide required URLs manually:
    skip_oidc_discovery     = true
    login_url               = "https://TEMPLATE_ESP_NAMESPACE.TEMPLATE_ESP_DOMAIN/uaa/oauth/authorize"
    redeem_url              = "http://uaa-service/uaa/oauth/token"
    validate_url            = "http://uaa-service/uaa/userinfo"
    oidc_jwks_url           = "http://uaa-service/uaa/token_keys"
    

    # Cookie Configuration
    cookie_name     = "esp_oauth2_proxy"
    cookie_expire   = "12h"
    cookie_refresh  = "60s"
    cookie_secure   = true
    cookie_domains  = "TEMPLATE_ESP_NAMESPACE.TEMPLATE_ESP_DOMAIN"
    cookie_samesite = "lax"

    # Auth Response Headers
    set_authorization_header  = true
    set_xauthrequest          = true
    pass_access_token         = true
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: oauth2-proxy
    app.kubernetes.io/part-of: esp
  name: oauth2-proxy-configmap
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: oauth2-proxy
  name: oauth2-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: oauth2-proxy
  template:
    metadata:
      labels:
        k8s-app: oauth2-proxy
    spec:
      TEMPLATE_ESP_AZUREimagePullSecrets:
      TEMPLATE_ESP_AZURE  - name: acr-secret
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: "sas-esp-oproxy"
      containers:
        - args:
            - --config=/config/oauth2-proxy.cfg
          env:
            - name: OAUTH2_PROXY_CLIENT_ID
              value: sv_client
            - name: OAUTH2_PROXY_CLIENT_SECRET
              value: secret
            # docker run -ti --rm python:3-alpine python -c 'import secrets,base64; print(base64.b64encode(base64.b64encode(secrets.token_bytes(16))));'
            - name: OAUTH2_PROXY_COOKIE_SECRET
              value: bXJnNSt4SDliTklzZ1IzRWpyOWtIUT09
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
          image: TEMPLATE_OAUTH2P_IMAGE
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsUser: 1001
            runAsNonRoot: true
          name: oauth2-proxy
          ports:
            - containerPort: 4180
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /config
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: oauth2-proxy-configmap
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: oauth2-proxy
  name: oauth2-proxy
spec:
  ports:
    - name: http
      port: 4180
      protocol: TCP
      targetPort: 4180
  selector:
    k8s-app: oauth2-proxy
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    kubernetes.io/ingress.allow-http: "false"
  name: oauth2-proxy
spec:
  ingressClassName: nginx
  rules:
    - host: TEMPLATE_ESP_NAMESPACE.TEMPLATE_ESP_DOMAIN
      http:
        paths:
          - path: /oauth2
            pathType: Prefix
            backend:
              service:
                name: oauth2-proxy
                port:
                  number: 4180
  tls:
    - hosts:
        - TEMPLATE_ESP_NAMESPACE.TEMPLATE_ESP_DOMAIN
      secretName: foo
